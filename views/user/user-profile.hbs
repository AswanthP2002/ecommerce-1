<section id="user-profile" class="pt-5 pb-5">
    <div class="container">
        <div class="row gy-3">
            <div class="col-md-7 order-2 order-md-1">
                <div class="card shadow p-3">
                    <p class="fw-bold">My Orders</p>
                    {{#each orders}}
                    <div class="border-bottom border-secondary d-flex justify-content-between p-3">
                        <div>
                            <p>Order Id : <span>{{this.orderId}}</span></p>
                            <p>Date : <span>{{formatDate this.createdAt}}</span></p>
                            <span>Ordered Items : </span>
                            {{#each this.productDetails}}
                            <span>{{this.productName}}</span>,
                            {{/each}}
                            <p>Total Price : <span>{{this.finalAmount}}</span></p>
                            {{#if (isCancelled this.status 'Cancelled')}}
                            <p style="color: red;">Order Status : {{this.status}}</p>
                            {{else}}
                            <p>Order Status : {{this.status}}</p>
                            {{/if}}

                        </div>
                        <div class="d-flex flex-column justify-content-between">
                            {{!-- <img src="/images/backend/products/" alt="" class="d-block bg-secondary" style="width: 80px;height:80px"> --}}
                            <button onclick="orderView('{{this.orderId}}','{{formatDate this.createdAt}}',{{this.productDetails}})" type="button" class="border border-secondary" data-bs-toggle="modal" data-bs-target="#orderViewModal">Action</button>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
            <div class="col-md-5 order-1 order-md-2">
                <div class="card shadow p-3" id="profile">
                    <div class="d-flex flex-column align-items-center">
                        <span class="rounded-circle d-flex justify-content-center align-items-center bg-secondary border border-secondary" id="user-profile-icon"><i class="fa-solid fa-user"></i></span>
                        <p class="text-center text-dark fw-bold">{{user.name}}</p>
                    </div>
                    <div>
                        <label for="user-email" class="fw-bold">Email</label>
                        <p id="user-email">{{user.email}}</p>
                    </div>
                    <div>
                        <label for="user-phone" class="fw-bold">Phone</label>
                        <p id="user-phone">{{user.phone}}</p>
                    </div>
                    <button onclick="showUserDetailsPreview('{{user._id}}, {{user.name}}', '{{user.email}}','{{user.phone}}')" class="btn btn-dark" id="edit-profile-btn" data-bs-toggle="modal" data-bs-target="#profileEditModal">Edit Profile</button>
                </div>
                <div class="card shadow p-3 mt-2" id="address">
                    <div class="d-flex justify-content-between align-items-center">
                        <p class="fw-bold">Address Management</p>
                        <button data-bs-toggle="modal" data-bs-target="#addressAddModal" class="btn btn-primary">Add +</button>
                    </div>
                    <div id="address-list">
                        {{#each address}}
                        <div class="rounded border border-primary mb-1">
                            <p>{{this.building}}, {{this.area}}, {{this.city}}, {{this.state}}, {{this.pinCode}}</p>
                            <a onclick="deleteAddress('{{this._id}}')" href="#"><i class="fa-solid fa-trash"></i></a>
                            <a onclick="fetchEditDetails('{{this._id}}')" href="#"><i class="fa-solid fa-pencil"></i></a>
                            {{!-- Here is a conflict need to be changed the direction of the edit addresss --}}
                        </div>
                        {{/each}}
                    </div>
                </div>
                <div class="d-flex justify-content-between gap-3 mt-2">
                    <div class="card p-3 shadow w-50 d-flex justify-content-center align-items-center">
                        <i class="fa-solid fa-heart"></i><span>My Wishlist</span>
                    </div>
                    <div class="card p-3 shadow w-50 d-flex justify-content-center align-items-center">
                        <i class="fa-solid fa-wallet"></i><span>Wallet</span>
                    </div>
                </div>
            </div>
        </div>
        <div id="addressAddModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header d-flex justify-content-between">
                        <h5 class="modal-title">Add Address</h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form onsubmit="validateAddressAddForm(event, this)" action="/profile/address/add?id={{user._id}}" method="post" id="address-add-form">
                            <input type="text" class="form-control mt-2" name="name" id="address-add-name" placeholder="full name" required>
                            <label for="" class="error-message" id="address-add-nameError"></label>
                            <input type="tel" class="form-control mt-2 mb-2" name="phone" id="address-add-phone" placeholder="phone" required>
                            <label for="" class="error-message" id="address-add-phoneError"></label>
                            <input type="text" class="form-control mt-2 mb-2" name="area" id="address-add-area" placeholder="Road name / Area" required>
                            <label for="" class="error-message" id="address-add-areaError"></label>
                            <input type="text" class="form-control mt-2 mb-2" name="building" id="address-add-building" placeholder="House No./Building name" required>
                            <label for="" class="error-message" id="address-add-buildingError"></label>
                            <input type="text" class="form-control mt-2 mb-2" name="city" id="address-add-city" placeholder="City" required>
                            <label for="" class="error-message" id="address-add-cityError"></label>
                            <input type="text" class="form-control mt-2 mb-2" name="state" id="address-add-state" placeholder="State" required>
                            <label for="" class="error-message" id="address-add-stateError"></label>
                            <input type="number" class="form-control mt-2 mb-2" name="pinCode" id="address-add-pinCode" placeholder="Pin code" required>
                            <label for="" class="error-message" id="address-add-pinCodeError"></label>
                            <div class="d-flex gap-2 mt-3">
                                <button class="btn btn-primary" type="submit">Save</button>
                                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        
                    </div>
                </div>
            </div>
        </div>

        <div id="addressEditModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header d-flex justify-content-between">
                        <h5 class="modal-title">Edit Address</h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form action="/profile/address/edit" method="post" id="addressEditForm">
                            <input type="text" class="form-control mt-2" name="name" placeholder="full name" required id="edit-address-name">
                            {{!-- <input type="tel" class="form-control mt-2" name="phone" placeholder="phone" required id="edit-address-phone"> --}}
                            <input type="text" class="form-control mt-2" name="area" placeholder="Road name / Area" required id="edit-address-area">
                            <input type="text" class="form-control mt-2" name="building" placeholder="House No./Building name" required id="edit-address-building">
                            <input type="text" class="form-control mt-2" name="city" placeholder="City" required id="edit-address-city">
                            <input type="text" class="form-control mt-2" name="state" placeholder="State" required id="edit-address-state">
                            <input type="number" class="form-control mt-2" name="pinCode" placeholder="Pin code" required id="edit-address-pinCode">
                            <button class="btn btn-primary" type="submit">Save</button>
                            <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
                        </form>
                    </div>
                    <div class="modal-footer">
                        
                    </div>
                </div>
            </div>
        </div>

        <div id="profileEditModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header d-flex justify-cotent-between">
                        <h5 class="modal-title">Edit Profile</h5>
                        <button class="btn-close" type="button" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form onsubmit="validateAndSubmit(event, this)">
                            <input type="text" id="user_id" name="ProfileId" class="form-control" style="visibility: hidden;">
                            <label for="">Name</label>
                            <input type="text" class="form-control" name="editProfileName" id="user_name" required>
                            <label for="" class="error-message" id="editProfileNameError"></label>
                            <label for="">Email</label>
                            <input type="email" name="editProfileEmail" class="form-control" id="user_email" required>
                            <label for="" class="error-message" id="editProfileEmailError"></label>
                            <label for="">Phone</label>
                            <input type="tel" name="editProfilePhone" class="form-control" id="user_phone" required>
                            <label for="" class="error-message" id="editProfilePhoneError"></label>
                            <label for="">Current Password</label>
                            <input type="password" name="editProfileCurrentPassword" class="form-control" required>
                            <label for="" class="error-message" id="editProfileCurPassError"></label>
                            <label for="">New Passowrd</label>
                            <input type="password" name="editProfileNewPassword" id="editProfileNewPassword" class="form-control" required>
                            <label for="" class="error-message" id="editProfileNewPassError"></label>
                            <label for="">Confirm Password</label>
                            <input type="password" name="confirmPassword" id="editProfileConfirmPassword" class="form-control" required>
                            <label for="" class="error-message" id="editProfileConfPassError"></label>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        {{!-- <div class="modal fade" id="orderViewModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="d-flex justify-content-between w-100">
                            <h5>Orders</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                    </div>
                    <div class="modal-body">
                        sample
                    </div>
                </div>
            </div>
        </div> --}}
    </div>
</section>
<script>

    let addressEditModal

    document.addEventListener('DOMContentLoaded', (e) => {
        addressEditModal = new bootstrap.Modal(document.getElementById('addressEditModal'))
    })

    //const addressEditModal = new bootstrap.Modal(document.getElementById('addressEditModal'))

    function deleteAddress(addressId){
        
        Swal.fire({
            title:'Delete Address',
            icon:'warning',
            text:'Do you want to delete the address',
            showConfirmButton:true,
            showCancelButton:true
        }).then((confirmed) => {
            if(confirmed.isConfirmed){
                fetch('/profile/address/delete', {
                    method:'POST',
                    headers:{
                        'content-type':'application/json'
                    },
                    body:JSON.stringify({addressId:addressId})
                }).then((response) => {
                    return response.json()
                }).then((data) => {
                    if(data.success){
                        Swal.fire({
                            title:'Deleted',
                            icon:'success',
                            text:data.message,
                            showConfirmButton:false,
                            timer:1500
                        }).then(() => location.reload())
                    }
                }).catch((error) => {
                    Swal.fire({
                        icon:'error',
                        title:'Error',
                        text:error.message,
                        showConfirmButton:true
                    })
                })
            }
        })
    }

    function showUserDetailsPreview(userId, name, email, phone){
        document.getElementById('user_id').value = userId
        document.getElementById('user_name').value = name
        document.getElementById('user_email').value = email
        document.getElementById('user_phone').value = phone
    }

    function validateAndSubmit(event, form){
        if(confirmPasswordError.innerHTML){
            event.preventDefault()
            alert('Fill form correctly')
        }
        const editData = new FormData(form)
        const editObject = editData.forEach((value, key) => {
            editObject[key] = value
        })

        //requesting
        fetch('/profile/edit', {
            method:'POST', 
            headers:{
                'content-type':'application/json'
            },
            body:JSON.stringify(editObject)
        })
    }

    const newPassword = document.getElementById('editProfileNewPassword')
    const confirmPassword = document.getElementById('editProfileConfirmPassword')

    const confirmPasswordError = document.getElementById('editProfileConfPassError')

    function validatePasswords(){
        const prevPassword = newPassword.value
        const confPassword = confirmPassword.value

        if(!confPassword === prevPassword){
            confirmPasswordError.innerHTML = 'passwords must be same'
            confirmPasswordError.style.color = 'red'
            confirmPasswordError.style.display = 'block'
        }else{
            confirmPasswordError.innerHTML = ''
            confirmPasswordError.style.display = 'none'
        }
    }

    confirmPassword.addEventListener('keyup', validatePasswords)

    function fetchEditDetails(addressId){
        console.log(`Address id `, addressId)
        fetch(`/profile/address/edit?id=${addressId}`,{
            method:'GET'
        }).then((response) => {
            return response.json()
        }).then((data) => {
            if(data.success){
                document.getElementById('edit-address-name').value = data.editableAddress.name
                //document.getElementById('edit-address-phone').value = data.editableAddress.phone
                document.getElementById('edit-address-building').value = data.editableAddress.building
                document.getElementById('edit-address-area').value = data.editableAddress.area
                document.getElementById('edit-address-city').value = data.editableAddress.city
                document.getElementById('edit-address-state').value = data.editableAddress.state
                document.getElementById('edit-address-pinCode').value = data.editableAddress.pinCode

                addressEditModal.show()

                const addressEditForm = document.getElementById('addressEditForm')
                //getCurrentAction
                const currentAction = addressEditForm.action
                addressEditForm.action = `${currentAction}?addressId=${addressId}`
            }
        })
    }

    function orderView(orders){

        console.log(orders)
    }


    const addAddressName = document.getElementById('address-add-name')
    const addAddressPhone = document.getElementById('address-add-phone')
    const addAddressArea = document.getElementById('address-add-area')
    const addAddressBuilding = document.getElementById('address-add-building')
    const addAddressCity = document.getElementById('address-add-city')
    const addAddressState = document.getElementById('address-add-state')
    const addAddressPinCode = document.getElementById('address-add-pinCode')
    const namePattern = /^[A-za-z\s]+$/
    const phoneNumberPattern = /^\d{10}$/
    const pinCodePattern = /^[1-9][0-9]{5}$/

    function setError(element, error, display){
        const errorLabel = element.nextElementSibling
        if(errorLabel){
            errorLabel.innerHTML = error
            errorLabel.style.color = 'red'
            errorLabel.style.display = display
        }
    }
    //Advanced method
    function validateAddressAddForm(event, form){
        event.preventDefault()
        let errorExist = 0
        document.querySelectorAll('.error-message').forEach((errorLabel) => {
            if(errorLabel.innerHTML){
                errorExist++
            }
        })
        if(errorExist){
            alert('Please fill the form correctly')
            return
        }

        const formData = new FormData(event.target)
        const formAction = form.action
        const formObject = {}
        formData.forEach((value, key) => {
            formObject[key] = value
        })
        console.log('This is form action while submiting', formAction)
        console.log('form data', formObject)
        fetch(formAction, {
            method:'POST',
            headers:{
                'content-type':'application/json'
            },
            body:JSON.stringify(formObject)
        })
        .then((response) => {
            if(!response.ok){
                console.log('Something wrong with response')
                return alert('Something went wrong')
            }

            return response.json()
        })
        .then((data) => {
            if(data.success){
                Swal.fire({
                    title:'Saved',
                    icon:'Success',
                    text:data.message,
                    showConfirmButton:false,
                    timer:1600
                }).then(() => location.reload())
            }else{
                Swal.fire({
                    title:'Failed',
                    icon:'error',
                    text:data.message,
                    showCancelButton:true
                })
            }
        })
        .catch((error) =>{
            Swal.fire({
                title:'Error',
                icon:'error',
                text:error.message,
                showCancelButton:true
            })
        })
        //return true
        
    }
    
    addAddressName.addEventListener('keyup', (e) => {
         if(addAddressName.value.trim() === ''){
            setError(addAddressName, 'Name can not be empty', 'block')    
        }else if(!namePattern.test(addAddressName.value)){
            setError(addAddressName, 'Numbers and special Characters are not allowed in name', 'block')
        }else{
            setError(addAddressName, '', 'none')
        }
    })
    addAddressPhone.addEventListener('keyup', (e) => {
        if(addAddressPhone.value === ''){
            setError(addAddressPhone, 'Phone number can not be empty', 'block')
        }else if(!phoneNumberPattern.test(addAddressPhone.value)){
            setError(addAddressPhone, 'Enter a valid phone number', 'block')
        }else{
            setError(addAddressPhone, '', 'none')
        }
    })
    addAddressArea.addEventListener('keyup', (e) => {
        if(addAddressArea.value === ''){
            setError(addAddressArea, 'Provide area/road name', 'block')
        }else{
            setError(addAddressArea, '', 'none')
        }
    })
    addAddressBuilding.addEventListener('keyup', (e) => {
        if(addAddressBuilding.value === ''){
            setError(addAddressBuilding, 'Provide house/building name', 'block')
        }else{
            setError(addAddressBuilding, '', 'none')
        }
    })
    addAddressCity.addEventListener('keyup', (e) => {
        if(addAddressCity.value === ''){
            setError(addAddressCity, 'Provide city', 'block')
        }else{
            setError(addAddressCity, '', 'none')
        }
    })
    addAddressState.addEventListener('keyup', (e) => {
        if(addAddressState.value === ''){
            setError(addAddressState, 'Provide State', 'block')
        }else{
            setError(addAddressState, '', 'none')
        }
    })
    addAddressPinCode.addEventListener('keyup', (e) => {
        if(addAddressPinCode.value === ''){
            setError(addAddressPinCode, 'Provide Pincode', 'block')
        }else if(!pinCodePattern.test(addAddressPinCode.value)){
            setError(addAddressPinCode, 'Enter a valid pincode', 'block')
        }else{
            setError(addAddressPinCode, '', 'none')
        }
    })


</script>