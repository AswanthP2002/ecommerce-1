<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="/css/user/style.css">


<section id="change-password" class="position-relative">
    <div class="rounded-circle bg-olive yellow-circle-top p position-absolute"></div>
    <div class="container">
        <div id="content" class="p-3">
            <p class="fs-4 fw-bold text-center">Shopsy</p>
            <p class="mt-3 text-align-justify">Create a New Password</p>
            <p><b>Please follow the guidlines!</b></p>
            <ul class="password-guidlines">
                <li>Password should be atleast 8 characters</li>
                <li>Add atleast one number and one special character</li>
                <li>Avoid using easly gussed informations</li>
            </ul>
            <form onsubmit="changePassword(event, this)" action="/password/reset/{{token}}" id="password-change-form">
                <div class="mb-3">
                    <label for="new-password">New Password</label>
                    <input type="password" name="newPassword" id="new-password" class="form-control mt-3" required>
                    <label for="" class="mt-2 error-message" id="newPasswordError"></label>
                </div>
                <div class="mb-3">
                    <label for="new-password-confirm">Confirm Password</label>
                    <input type="password" name="confirmPassword" id="new-password-confirm" class="form-control mt-3" required>
                    <label for="" class="mt-2 error-message" id="confirmPasswordError"></label>
                </div>
                <button type="submit" class="btn form-control mt-3">Send</button>
            </form>
            <p class="text-center pt-4">Dont have an account? <a href="/user_signup">Signup</a></p>
        </div>
    </div>
    <div class="rounded-circle bg-olive position-absolute p-5 yellow-circle-bottom"></div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
<script>

    document.addEventListener('DOMContentLoaded', (e) => {
    const newPassword = document.getElementById('new-password')
    const confirmPassword = document.getElementById('new-password-confirm')
    const passwordPattern = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;

    //Setting Error message
    function setError(element, message, display){
        const errorLabel = element.nextElementSibling
        errorLabel.innerHTML = ''
        errorLabel.style.display = 'none'
        if(errorLabel){
            errorLabel.innerHTML = message
            errorLabel.style.color = 'red'
            errorLabel.style.fontSize = '.850rem'
            errorLabel.style.display = display
        }
        console.log('error label not found')
    }  

    function validateNewPassword(){
        const password = newPassword.value
        if(!passwordPattern.test(password)){
            setError(newPassword, 'Password length shoud be 8 characters and  must be a combination of numbers and special characters', 'block')
        }else{
            setError(newPassword, '', 'none')
        }
    }  

    function validateConfirmPassword(){
        const password = newPassword.value
        const passwordConfirm = confirmPassword.value
        console.log('new password', password)
        console.log('confirm password', passwordConfirm)
        if(passwordConfirm !== password){
            setError(confirmPassword, 'Password must be the same!', 'block')
        }else{
            setError(confirmPassword, '', 'none')
        }
    }

    newPassword.addEventListener('keyup', validateNewPassword)
    confirmPassword.addEventListener('keyup', validateConfirmPassword)

    
    })

    function changePassword(event, form){
        event.preventDefault()
        let errorCount = 0
        const errorLabel = document.querySelectorAll('.error-message')
        errorLabel.forEach((error) => {
            if(error.innerHTML){
                errorCount++
            }
        })
        if(errorCount > 0) return 
        
        const formAction = form.action
        const formData = new FormData(form)
        const formObject = {}
        formData.forEach((value, key) => {
            formObject[key] = value
        })
        /*console.log('this is the form action ', formAction)
        return alert('Pipeline is under maintanance')*/

        //loading
        Swal.fire({
            title:'Patience is a Key!',
            icon:'info',
            text:'Please wait......',
            allowOutsideClick:false,
            showConfirmButton:false,
            willOpen:() => {
                Swal.showLoading()
            }
        })
        //submiting
        fetch(formAction, {
            method:'POST',
            headers:{
                'content-type':'application/json'
            },
            body:JSON.stringify(formObject)
        })
        .then((response) => {
            return response.json()
        })
        .then((data) => {
            Swal.close()
            if(data.success){
                Swal.fire({
                    title:'Changed',
                    icon:'success',
                    text:data.message,
                    showConfirmButton:false,
                    timer:2000
                }).then(() => window.location.href = data.redirectUrl)
            }else{
                Swal.fire({
                    title:'Error',
                    icon:'error',
                    text:data.message,
                    showConfirmButton:true
                })
            }
        })
        .catch((error) => {
            Swal.fire({
                title:'Error',
                icon:'error',
                text:error.message,
                showConfirmButton:true
            })
        })

    }
</script>
