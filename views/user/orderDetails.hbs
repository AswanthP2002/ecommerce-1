<section id="orderDetails" class="pt-5 pb-5" style="background-color: rgb(244, 244, 247);">
    <div class="container">
        <div class="row gy-3">
            <div class="col-12 col-md-4 bg-white border-right border-secondary p-2">
                <p class="fw-bold fs-5">Delivery Address</p>
                <p class="fw-bold" style="">{{shippingAddress.name}}</p>
                <p style="font-size:.900rem">{{shippingAddress.building}}, {{shippingAddress.area}}<br>
                {{shippingAddress.city}}, {{shippingAddress.state}} - {{shippingAddress.pinCode}}</p>
            </div>
            <div class="col-12 col-md-4 bg-white border-right border-secondary p-2">
                <p class="fw-bold fs-5">Order Status</p>
                {{!-- <div class="progression-container position-relative">
                    <div class="progression d-flex">

                    </div>
                </div> --}}
                <div>
                    {{#if (isCancelled paymentStatus)}}
                    <p class="text-danger">{{paymentStatus}}</p>
                    {{else}}
                    <p>{{paymentStatus}}</p>
                    {{/if}}
                    {{!-- failed orders --}}
                    {{#ifEquals paymentStatus "Awaiting Payment"}}
                    <button onclick="confirm('Are you sure want to continue payment?'), retryPayment('{{razorpayOrderId}}')" class="btn btn-warning">Complete Payment</button>
                    {{/ifEquals}}
                </div>
                <p><i>* {{orderRecord}}</i></p>
            </div>
            <div class="col-12 col-md-4 bg-white p-2">
                <p class="fw-bold fs-5">More Actions</p>
                <div class="d-flex justify-content-between">
                    <p>Download Invoice</p>
                    {{#ifEquals orderDetails.[0].status "Delivered"}}
                    <button onclick="invoiceDownload('{{orderObjectId}}')" class="btn" style="border-radius: 0;border:1px solid rgb(192, 189, 189)">Download</button>
                    {{else}}
                    <button onclick="invoiceDownload('{{orderObjectId}}')" class="btn" style="border-radius: 0;border:1px solid rgb(192, 189, 189)" disabled>Download</button>
                    {{/ifEquals}}
                </div>
            </div>
            <div class="col-12 p-3 bg-white">
                <p class="fs-6 fw-bold">Ordered Items</p>
                {{#each orderDetails}}
                <div class="border-bottom d-flex justify-content-between">
                    <div id="item-image">
                        <img src="/images/backend/products/{{this.productDetails.sku}}/{{getImage this.productDetails.productImage 0}}" alt="" style="width: 70px;height: 80px;">
                    </div>
                    <div>
                        <p>{{this.productDetails.productName}}</p>
                    </div>
                    <div>
                        <p>Quantity : {{this.orderedItems.quantity}} Nos</p>
                    </div>
                    <div>
                        <p>{{this.orderedItems.size}} & {{this.productDetails.color}}</p>
                    </div>
                    <div>
                        <p>Price : Rs.{{this.orderedItems.price}}</p>
                    </div>
                </div>
                {{/each}}
                <div class="">
                    <p class="fs-bold">Total Spend : {{finalAmount}}</p>
                    <i class="fa-solid fa-circle-question" id="popoverButton" style="cursor: pointer;"></i>
                </div>
                <div id="orderActions">
                   {{#if (isCancellable paymentStatus)}}
                    <button onclick="cancelOrder('{{orderObjectId}}', '{{logedUser.id}}')" class="btn" id="orderCancelButton" style="border: 1px solid rgb(6, 150, 6);">Cancel Order</button>
                   {{/if}}
                   {{#if (isReturnable paymentStatus)}}
                    <button onclick="returnItem('{{orderObjectId}}', '{{logedUser.id}}')" class="btn" id="orderReturnButton" style="border: 1px solid red;">Return Item</button>
                   {{/if}}
                   {{!-- {{else}}
                    <button class="btn" id="orderReturnButton" style="border: 1px solid red;" disabled>Return Item</button>
                   {{/if}}
                   {{else}}
                    <button class="btn" id="orderCancelButton" style="border: 1px solid rgb(6, 150, 6);" disabled>Cancel Order</button>
                    <button class="btn" id="orderReturnButton" style="border: 1px solid red;" disabled>Return Item</button>
                   {{/if}} --}}

                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', (e) => {
        const itemTotal = "{{totalPrice}}"
        const finalAmount = "{{finalAmount}}"
        var popover = new bootstrap.Popover(document.getElementById('popoverButton'), {
            title:'Price Details',
            content:`
            <div style='display:flex;justify-content-between;'>
                <p style='font-size:0.7rem;'><b>Items</b></p><p style='font-size:0.7rem'>Rs.${itemTotal}</p>
                <p style='font-size:0.7rem;'><b>Shipping</b></p><p style='font-size:0.7rem;'>Rs.60</p>
            </div>
            <div style='display:flex;justify-content-between;'>
                <p style='font-size:0.7rem;'><b>Final</b></p><p style='font-size:0.7rem;'>Rs.${finalAmount}</p>
            </div>`,
            html:true,
            trigger:'click'
        })


        
    })

    function cancelOrder(orderId, userId){
        console.log('cancel request reached !!', 'oi',orderId, 'ui',userId)
            if(orderId && userId){
                console.log('condition true, ready to be confirmation alert!')
                Swal.fire({
                    icon:'info',
                    title:'Cancel?',
                    text:'Are you sure want to cance this order?',
                    showConfirmButton:true, 
                    showCancelButton:true,
                    confirmButtonText:'Proceed with cancel',
                    allowOutsideClick:false
                }).then((result) => {
                    if(result && result.isConfirmed){
                        fetch('/order/cancel', {
                            method:'POST',
                            headers:{
                                'content-type':'application/json'
                            },
                            body:JSON.stringify({orderId, userId})
                        })
                        .then((response) => {
                            if(!response.ok){
                                throw new Error('Server is not responding!')
                            }

                            return response.json()
                        })
                        .then((data) => {
                            if(data && data.success){
                                Swal.fire({
                                    icon:'success',
                                    title:'Success',
                                    text:data.message,
                                    showConfirmButton:false,
                                    timer:1800
                                }).then(() => {location.reload()})
                            }else{
                                Swal.fire({
                                    icon:'error',
                                    title:'Error',
                                    text:data.message,
                                    showConfirmButton:true
                                })
                            }
                        })
                        .catch((error) => {
                            Swal.fire({
                                icon:'error',
                                title:'Error',
                                text:error.message,
                                showConfirmButton:true
                            })
                        })
                    }
                })
            }
    }
    function returnItem(orderId, userId){

        if(orderId, userId){
            Swal.fire({
                title: 'Return Item',
                html: `
                            <label for="returnReason">Reason for return:</label>
                            <select class="form-control" id="returnReason" style="width: 100%; margin-top: 10px;">
                                <option value="Damaged">Damaged or Deffective Item</option>
                                <option value="Not as described">Not as described</option>
                                <option value="Wrong item">Wrong item</option>
                                <option value="Size/Color">Size/Color Issue</option>
                                <option value="Other">Other</option>
                            </select>
                            <textarea class="form-control" id="returnComments" placeholder="Additional comments..." style="width: 100%; margin-top: 10px;" required></textarea>
                        `,
                showConfirmButton:true,
                confirmButtonText:'Submit',
                allowOutsideClick: false,
                preConfirm:() => {
                    const returnReason = document.getElementById("returnReason").value;
                    const description = document.getElementById("returnComments").value

                    if(!returnReason || !description){
                        Swal.showValidationMessage("Please Provide Reason and description")
                        return false
                    }

                    return {returnReason, description}
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const returnReason = result.value.returnReason
                    const description = result.value.description

                    fetch('/order/return', {
                        method:'POST',
                        headers:{
                            'content-type':'application/json'
                        },
                        body:JSON.stringify({orderId, userId, returnReason, description})
                    })
                    .then((response) => {
                        if(!response.ok){
                            Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:'Server not responding',
                            showConfirmButton:true
                            })
                        return
                        }
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            Swal.fire({
                                icon:'success',
                                title:data.title,
                                text:data.message,
                                showConfirmButton:true
                            }).then(() => location.reload())

                        }else{
                            Swal.fire({
                                icon:'warning',
                                title:data.title,
                                text:data.message,
                                showConfirmButton:true
                            })
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:error.message,
                            showConfirmButton:true
                        })
                    })
                }
            });
        }
    }

    function invoiceDownload(orderId){
        if(orderId){
            fetch(`/download-invoice?orderId=${orderId}`, {
                method:'GET',
                headers:{
                    'Accept':'application/pdf'
                }
            })
            .then((response) => {
                if(!response.ok){
                    return Swal.fire({
                        icon:'error',
                        title:'Oops!',
                        text:'Server not responding!'
                    })
                }
                console.log('response here', response)
                return response.blob()
            })
            .then((blob) => {
                console.log(blob)
                const link = window.URL.createObjectURL(blob)
                const a = document.createElement('a')
                a.href = link
                a.download = 'invoice.pdf'
                a.click()
            })
            .catch((error) => {
                console.log(error)
                Swal.fire({
                    icon:'error',
                    title:'Failed',
                    text:'Sever Error, please try again after sometime'
                })
            })
        }else{
            alert('error occured!')
        }
    }


    async function retryPayment(razorpayOrderId){
        console.log('this is razorpay order id', razorpayOrderId)
        alert('hey there')
        const response = await fetch(`/order/proceed?razorpayOrderId=${razorpayOrderId}&retry=${true}`, {
            method:'POST'
        })
        const razorpayOrder = await response.json()
            var options = {
            "key": "rzp_test_4MBYamMKeUifHI",
            "amount": razorpayOrder.amount,
            "currency": razorpayOrder.currency,
            "name": "Shopy Fashions",
            "description": "Thank you for shopping with Shopy Fashions! Your order is almost complete. Please proceed to secure your payment and enjoy our latest styles delivered right to your door!",
            "image": "http://localhost:5000/public/images/frontend/shopy logo.png",
            "order_id": razorpayOrder.id,
            "handler": function (response) {
                console.log(response)
                console.log("This step of Payment Succeeded", response);
                fetch(`/order/proceed?orderId=${razorpayOrder.receipt}`,{
                    method:'POST',
                    headers:{
                        'content-type':'application/json'
                    }
                })
                    .then((response) => {
                        console.log(response)
                        if(!response.ok){
                            return alert('something went wrong while order success message showing!')
                        }
                        return response.json()
                    })
                    .then((data) => {
                        if(data.success){
                            /*const orderPlacedModal = new bootstrap.Modal(document.getElementById('orderPlacedModal'))
                            document.getElementById('order-confirm-message').innerHTML = data.message
                            orderPlacedModal.show()*/
                            Swal.fire({
                                icon:'success',
                                title:'Completed',
                                message:'Your order has been completed, Thank you for purchasing!'
                            }).then(() => window.location.reload())
                        }
                    })
            },
            "prefill": {
                //Here we are prefilling random contact
                "contact": "9876543210",
                //name and email id, so while checkout
                "name": "Sreya Suresh",
                "email": "nimmishreya51@gmail.com"
            },
            "theme": {
                "color": "#ffa7a7"
            }
        };

        const razpay = new Razorpay(options)
        razpay.open()
        razpay.on('payment.failed', (response) => {
            console.log('failed response', response)
            if(response.error.reason === 'payment_failed'){
                //handling failed payments
                fetch(`/order/payment/failed?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            tempOrder = razorpayOrder.receipt
                            //proceed with message
                            Swal.fire({
                                icon:'error',
                                title:data.title,
                                text:data.message,
                                showCancelButton:true,
                                showConfirmButton:true,
                                cancelButtonText:'Pay later',
                                confirmButtonText:'Retry',
                                reverseButtons:true
                            }).then(async (result) => {
                                try{
                                   if(result.isConfirmed){
                                    await proceedRetryPayment(data.razorPayId)
                                   }else if(result.dismiss){
                                    window.location.href = '/'
                                   }
                                }catch(e){
                                    console.log('error occured while retyring payment', e)
                                    Swal.fire({
                                        icon:'error',
                                        title:'Error',
                                        text:'Internal Server Error, please try again after sometime!'
                                    })
                                }
                            })
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:error.message
                        })
                    })
                console.log('payment failed reason : : failure')

            }else if(response.error.reason === 'payment_cancelled'){
                console.log('payment failed reason : : failed')
                fetch(`/order/payment/cancel?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Server not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            Swal.fire({
                                icon:'info',
                                title:'Payment Cancelled',
                                showConfirmButton:false,
                                timer:1600
                            })
                        }else{
                            console.log(data.message)
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:error.message
                        })
                    })
            }
        })
    }

</script>

