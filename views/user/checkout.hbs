<section id="checkout" class="pt-5 pb-5">
    <div class="container">
        <div class="border border-secondary rounded p-4">
            <div>
                <p class="fw-bold fs-4">Deliver to</p>
                
                <div class="row">
                    {{#if addressList}}
                    {{#each addressList}}
                    <div class="col-md-4">
                        <div class="border border-secondary rounded p-2">
                            <p>{{this.building}}, {{this.area}}, {{this.city}}, {{this.state}} - {{this.pinCode}}</p>
                            <input type="radio" name="selectedAddress" id="" value="{{this._id}}">
                        </div>
                    </div>
                    {{/each}}
                    <button onclick="addNewAddress('{{logedUser.id}}')" type="button">Add Address</button>
                    {{else}}
                    <button onclick="window.location.href='/profile?id={{logedUser.id}}'" type="button"
                        class="btn btn-primary">Add Address</button>
                    {{/if}}

                </div>
            </div>
            <div class="mt-3">
                <p class="fw-bold fs-4">In Pack</p>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Name</th>
                                <th>Size & Color</th>
                                <th>Qty (Nos)</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each cart}}
                            <tr>
                                <td>
                                    <div class="d-flex justify-content-center align-items-center bg-secondary"
                                        style="width: 80px;">
                                        <img src="/images/backend/products/{{this.productDetails.sku}}/{{getImage this.productDetails.productImage 0}}"
                                            alt="product image" style="width: 80%;">
                                    </div>
                                </td>
                                <td>{{this.productDetails.productName}}</td>
                                <td>{{this.productDetails.color}} & {{this.vriantDetails.size}}</td>
                                <td>{{this.items.quantity}}</td>
                                <td>Rs.{{this.vriantDetails.regularPrice}}</td>
                            </tr>
                            {{/each}}
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="4"><b>Item Total</b></td>
                                <td>Rs.{{cartPayment.subTotal}}</td>
                            </tr>
                            <tr>
                                <td colspan="4">Discount</td>
                                {{#if cartPayment.discount}}
                                <td id="totalDiscount">{{cartPayment.discount}}</td>
                                {{else}}
                                <td>-</td>
                                {{/if}}
                            </tr>
                            <tr>
                                <td colspan="4">Shipping Fee</td>
                                <td>Rs.60</td>
                            </tr>
                            <tr>
                                <td colspan="4">Tax <span id="taxPercentage">{{cartPayment.taxPercentage}}</span></td>
                                <td>Rs.<span id="taxAmount">{{cartPayment.taxAmount}}</span></td>
                            </tr>
                            <tr>
                                <td colspan="4"><b>Grand Total</b></td>
                                <td><b>Rs.{{cartPayment.grantTotal}}</b></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="mt-3">
                <p class="fs-4 fw-bold">Payment Method</p>
                <div>
                    <form action="#" id="paymentForm">
                        <label>
                            <input type="radio" name="paymentMethod" value="cod" checked> Cash on Delivery
                        </label><br>
                        <label>
                            <input type="radio" name="paymentMethod" value="onlinePayment"> Online Payment
                        </label><br>
                        {{#if userWallet.balance}}
                        <label>
                            <input type="radio" name="paymentMethod" value="wallet" id="paymentMethod-wallet"> <span id="wallet-notes">Wallet - Balance: â‚¹<span id="walletBalance">{{userWallet.balance}}</span></span>
                        </label><br>
                        {{/if}}
                        <div class="d-flex justify-content-between" id="checkout-payment"
                            data-coupon="{{cartPayment.couponApplied}}">
                            <p class="fs-3 fw-bold">total payable Rs.<span
                                    id="payableAmount">{{cartPayment.grantTotal}}</span> <span
                                    class="ms-2 fs-5 text-decoration-line-through text-secondary"
                                    id="totalAmount">{{cartPayment.subTotal}}</span></p>
                            <button type="submit" class="btn btn-dark rounded ps-3 pe-3">Continue</button>
                        </div>
                        <a href="/cart" class="text-decoration-none text-primary">Return to Cart ></a>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="orderConfirmationModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <form action="">
                        <p>The other contents will come herer</p>
                        <button type="button" class="btn btn-dark" id="placeOrder-button">Place Order</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="orderPlacedModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body p-3">
                    <div class="success-animation">
                        <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                            <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none" />
                            <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                        </svg>
                    </div>
                    <p class="text-center fs-4 fw-bold" id="order-confirm-message"></p>
                    <div class="d-flex justify-content-center gap-3">
                        <button onclick="window.location.href='/profile?id={{logedUser.id}}'"
                            class="btn btn-dark rounded">Orders</button>
                        <button onclick="window.location.href='/shop'" class="btn btn-secondary rounded">Shop</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    let tempOrder = null
    document.addEventListener('DOMContentLoaded', () => {
            const payableAmount = document.getElementById('payableAmount').textContent
            const walletAmount = document.getElementById('walletBalance').textContent
            const walletRadio = document.getElementById('paymentMethod-wallet')
            console.log('payable amount =', payableAmount)
            console.log('wallet amount =', walletAmount)
            if(Number(payableAmount) > Number(walletAmount)){
                walletRadio.disabled = true
                document.getElementById('wallet-notes').style.color = 'gray'
            }else{
                walletRadio.disabled = false
                document.getElementById('wallet-notes').style.color = 'black'
            }

        const orderConfirmModal = new bootstrap.Modal(document.getElementById('orderConfirmationModal'))
        const orderPlacedModal = new bootstrap.Modal(document.getElementById('orderPlacedModal'))
        
        document.getElementById('paymentForm').addEventListener('submit', (event) => {
            event.preventDefault()
            const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value
            const isAddressSelected = document.querySelector('input[name="selectedAddress"]:checked')
            console.log(isAddressSelected)
            if (!isAddressSelected) {
                Swal.fire({
                    title: 'Delivery Address!',
                    icon: 'warning',
                    text: 'Please select Delivery Address before continuing!',
                    showConfirmButton: false,
                    timer: 1800
                })
                return
            }
            //restrict cash on deliver if the order amount is above 1000
            
            //const radioWallet = document.getElementById('paymentMethod-wallet')
           // radioWallet.onclick = alert('you will win tomorrow')
            //if(parseInt(payableAmount) < parseInt(walletAmount)){

            //}
            if(paymentMethod === 'cod' && parseInt(payableAmount) > 1000){
                Swal.fire({
                    icon:'warning',
                    title:'Payment Restriction',
                    text:'Order exceeding Rs.1000 can not be paid via Cash on delivery. Please select an alternate payment method'
                })
                return 
            }
            
            fetch('/payment', {
                method: 'POST',
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify({ paymentMethod })
            })
                .then((response) => {
                    return response.json()
                })
                .then((data) => {
                    Swal.fire({
                        title: data.title,
                        icon: 'info',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                            if (data.title === 'Online Payment') {
                                Swal.fire({
                                    icon: 'info',
                                    title: 'Proceed to Payment',
                                    text: 'Do you want to proceed with the payment process?',
                                    showCancelButton: true,
                                    showConfirmButton: true,
                                    confirmButtonText: 'Continue Payment',
                                    allowOutsideClick: false
                                }).then((result) => {
                                    if(result.isConfirmed){
                                        proceedOnlinePayment()
                                    }
                                })
                            }else if(data.title === 'Pay through wallet'){
                                Swal.fire({
                                    title: "Wallet Payment",
                                    text: "Do you want to proceed with wallet payment?",
                                    icon: "info",
                                    showCancelButton: true,
                                    confirmButtonText: `Pay Rs.${payableAmount}`,
                                    cancelButtonText: "Cancel",
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                    // Logic when "Continue" is clicked
                                        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value
                                        const payableAmount = document.querySelector('#paymentForm #payableAmount').textContent
                                        const totalAmount = document.querySelector('#paymentForm #totalAmount').textContent


                                        const orderData = {
                                            paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value,
                                            selectedAddress: selectedAddress,
                                            totalAmount: Number(totalAmount),
                                            payableAmount: Number(payableAmount),
                                            discount:document.getElementById('totalDiscount').textContent,
                                            couponApplied: document.getElementById('checkout-payment').dataset.coupon,
                                        }
                                        console.log('coupon', orderData.couponApplied)
                                        fetch('/order/proceed', {
                                            method: 'POST',
                                            headers: {
                                                'content-type': 'application/json'
                                            },
                                            body: JSON.stringify(orderData)
                                        })
                                        .then((response) => {
                                            if (response.ok) {
                                                return response.json()
                                            }
                                        })
                                        .then((data) => {
                                            if (data.success) {
                                                document.getElementById('order-confirm-message').innerHTML = data.message
                                                orderPlacedModal.show()
                                            } else {
                                                throw new Error('error')
                                            }
                                        })
                                        .catch((error) => {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'error occured'
                                            })
                                        })
                                        
                                    } else {
                                    // Logic when "Cancel" is clicked (optional)
                                        Swal.fire({
                                            title: "Cancelled",
                                            text: "You have cancelled the wallet payment.",
                                            icon: "error",
                                        });
                                    }
                                });
                            } else {
                                orderConfirmModal.show()
                            }

                        })
                })
                .catch((error) => {
                    Swal.fire({
                        title: 'Something Went Wrong!',
                        icon: 'error',
                        text: error.message,
                        showConfirmButton: true
                    })
                })
        })

        document.getElementById('placeOrder-button').addEventListener('click', async () => {
            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value
            const payableAmount = document.querySelector('#paymentForm #payableAmount').textContent
            const totalAmount = document.querySelector('#paymentForm #totalAmount').textContent


            const orderData = {
                paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value,
                selectedAddress: selectedAddress,
                totalAmount: Number(totalAmount),
                payableAmount: Number(payableAmount),
                discount:document.getElementById('totalDiscount').textContent,
                couponApplied: document.getElementById('checkout-payment').dataset.coupon,
            }
            console.log('coupon', orderData.couponApplied)
            fetch('/order/proceed', {
                method: 'POST',
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(orderData)
            })
                .then((response) => {
                    if (response.ok) {
                        return response.json()
                    }
                })
                .then((data) => {
                    if (data.success) {
                        document.getElementById('order-confirm-message').innerHTML = data.message
                        orderPlacedModal.show()
                    } else {
                        throw new Error('error')
                    }
                })
                .catch((error) => {
                    Swal.fire({
                        icon: 'error',
                        title: 'error occured'
                    })
                })

        })
    })

    async function createRazorPayOrder() {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value
        const payableAmount = document.querySelector('#paymentForm #payableAmount').textContent
        const totalAmount = document.querySelector('#paymentForm #totalAmount').textContent
        const taxPercentage = Number(document.getElementById('taxPercentage').textContent)
        const taxAmount = Number(document.getElementById('taxAmount').textContent)


        const orderData = {
            paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value,
            selectedAddress: selectedAddress,
            totalAmount: Number(totalAmount),
            payableAmount: Number(payableAmount),
            discount:Number(document.getElementById('totalDiscount').textContent),
            couponApplied: document.getElementById('checkout-payment').dataset.coupon,
            tempOrder,
            taxPercentage,
            taxAmount
        }

        const response = await fetch('/order/proceed', {
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify(orderData)
        })
        const data = await response.json()
        return data
    }

    async function proceedOnlinePayment() {
        const razorpayOrder = await createRazorPayOrder()
        var options = {
            "key": "rzp_test_4MBYamMKeUifHI",
            "amount": razorpayOrder.amount,
            "currency": razorpayOrder.currency,
            "name": "Shopy Fashions",
            "description": "Thank you for shopping with Shopy Fashions! Your order is almost complete. Please proceed to secure your payment and enjoy our latest styles delivered right to your door!",
            "image": "http://localhost:5000/public/images/frontend/shopy logo.png",
            "order_id": razorpayOrder.id,
            "handler": function (response) {
                console.log(response)
                console.log("This step of Payment Succeeded", response);
                fetch(`/order/proceed?orderId=${razorpayOrder.receipt}`,{
                    method:'POST',
                    headers:{
                        'content-type':'application/json'
                    }
                })
                    .then((response) => {
                        console.log(response)
                        if(!response.ok){
                            return alert('something went wrong while order success message showing!')
                        }
                        return response.json()
                    })
                    .then((data) => {
                        if(data.success){
                            const orderPlacedModal = new bootstrap.Modal(document.getElementById('orderPlacedModal'))
                            document.getElementById('order-confirm-message').innerHTML = data.message
                            orderPlacedModal.show()
                        }
                    })
            },
            /*"modal":{
                "ondismiss":function(){
                    alert('Payment was canceled')
                    fetch(`/order/payment/cancel?orderId=${razorpayOrder.receipt}`)
                        .then((respnose) => {
                            if(!respnose.ok){
                                return alert('something went wrong while canceling payment')
                            }
                            return respnose.json()
                        })
                        .then((data) => {
                            if(data.success){
                                Swal.fire({
                                    icon:'info',
                                    title:'Cancelled',
                                    text:'Payment Cancelled or Failed',
                                    showConfirmButton:false,
                                    timer:1800
                                })
                            }
                        })
                        .catch((error) => {
                            Swal.fire({
                                icon:'error',
                                title:'Error',
                                text:error.message,
                            })
                        })
                }
            },*/
            "prefill": {
                //Here we are prefilling random contact
                "contact": "9876543210",
                //name and email id, so while checkout
                "name": "Sreya Suresh",
                "email": "nimmishreya51@gmail.com"
            },
            "theme": {
                "color": "#ffa7a7"
            }
        };
        const razpay = new Razorpay(options)
        razpay.open()
        razpay.on('payment.failed', (response) => {
            console.log('failed response', response)
            if(response.error.reason === 'payment_failed'){
                //handling failed payments
                fetch(`/order/payment/failed?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            //tempOrder = razorpayOrder.receipt
                            //proceed with message
                            console.log('this is data before calling retry!', data)
                            //confirm('are you sure want to coninute?')
                            Swal.fire({
                                icon:'error',
                                title:data.title,
                                text:data.message,
                                showCancelButton:true,
                                showConfirmButton:true,
                                cancelButtonText:'Pay later',
                                confirmButtonText:'Retry',
                                reverseButtons:true
                            }).then(async (result) => {
                                try{
                                    console.log('This is data razorpaid before calling retyr1', data.razorPayId)
                                    //confirm('are you suree want to continue?')
                                   if(result.isConfirmed){
                                    await proceedRetryPayment(data.razorPayId)
                                   }else if(result.dismiss){
                                    window.location.href = '/'
                                   }
                                }catch(e){
                                    console.log('error occured while retyring payment', e)
                                    Swal.fire({
                                        icon:'error',
                                        title:'Error',
                                        text:'Internal Server Error, please try again after sometime!'
                                    })
                                }
                            })
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:error.message
                        })
                    })
                console.log('payment failed reason : : failure')

            }else if(response.error.reason === 'payment_cancelled'){
                console.log('payment failed reason : : failed')
                fetch(`/order/payment/cancel?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Server not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            Swal.fire({
                                icon:'info',
                                title:'Payment Cancelled',
                                showConfirmButton:false,
                                timer:1600
                            })
                        }else{
                            console.log(data.message)
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:error.message
                        })
                    })
            }
        })

        async function proceedRetryPayment(razorpayId){
            console.log('this is razorpayid',razorpayId)
            //confirm('are you want to continue?')
            const response = await fetch(`/order/proceed?razorpayOrderId=${razorpayId}&retry=${true}`, {
                method:'POST',
                headers:{'content-type':'application/json'}
            })
            const razorpayOrder = await response.json()
            var options = {
            "key": "rzp_test_4MBYamMKeUifHI",
            "amount": razorpayOrder.amount,
            "currency": razorpayOrder.currency,
            "name": "Shopy Fashions",
            "description": "Thank you for shopping with Shopy Fashions! Your order is almost complete. Please proceed to secure your payment and enjoy our latest styles delivered right to your door!",
            "image": "http://localhost:5000/public/images/frontend/shopy logo.png",
            "order_id": razorpayOrder.id,
            "handler": function (response) {
                console.log(response)
                console.log("This step of Payment Succeeded", response);
                fetch(`/order/proceed?orderId=${razorpayOrder.receipt}`,{
                    method:'POST',
                    headers:{
                        'content-type':'application/json'
                    }
                })
                    .then((response) => {
                        console.log(response)
                        if(!response.ok){
                            return alert('something went wrong while order success message showing!')
                        }
                        return response.json()
                    })
                    .then((data) => {
                        if(data.success){
                            const orderPlacedModal = new bootstrap.Modal(document.getElementById('orderPlacedModal'))
                            document.getElementById('order-confirm-message').innerHTML = data.message
                            orderPlacedModal.show()
                        }
                    })
            },
            "prefill": {
                //Here we are prefilling random contact
                "contact": "9876543210",
                //name and email id, so while checkout
                "name": "Sreya Suresh",
                "email": "nimmishreya51@gmail.com"
            },
            "theme": {
                "color": "#ffa7a7"
            }
        };
        const razpay = new Razorpay(options)
        razpay.open()
        razpay.on('payment.failed', (response) => {
            console.log('failed response', response)
            if(response.error.reason === 'payment_failed'){
                //handling failed payments
                fetch(`/order/payment/failed?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            tempOrder = razorpayOrder.receipt
                            //proceed with message
                            Swal.fire({
                                icon:'error',
                                title:data.title,
                                text:data.message,
                                showCancelButton:true,
                                showConfirmButton:true,
                                cancelButtonText:'Pay later',
                                confirmButtonText:'Retry',
                                reverseButtons:true
                            }).then(async (result) => {
                                try{
                                   if(result.isConfirmed){
                                    await proceedRetryPayment(data.razorPayId)
                                   }else if(result.dismiss){
                                    window.location.href = '/'
                                   }
                                }catch(e){
                                    console.log('error occured while retyring payment', e)
                                    Swal.fire({
                                        icon:'error',
                                        title:'Error',
                                        text:'Internal Server Error, please try again after sometime!'
                                    })
                                }
                            })
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:error.message
                        })
                    })
                console.log('payment failed reason : : failure')

            }else if(response.error.reason === 'payment_cancelled'){
                console.log('payment failed reason : : failed')
                fetch(`/order/payment/cancel?orderId=${razorpayOrder.receipt}`)
                    .then((response) => {
                        if(!response.ok) throw new Error('Server not responding!')
                        return response.json()
                    })
                    .then((data) => {
                        if(data && data.success){
                            Swal.fire({
                                icon:'info',
                                title:'Payment Cancelled',
                                showConfirmButton:false,
                                timer:1600
                            })
                        }else{
                            console.log(data.message)
                        }
                    })
                    .catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:error.message
                        })
                    })
            }
        })
        }
    }

    function addNewAddress(userId){
        if(userId){
            Swal.fire({
                title:'Add Address!',
                html:`
                    <label for="name">Name</label>
                    <input type="text" id="name" class="form-control mt-2">
                    <label for="phone">Phone</label>
                    <input type="text" id="phone" class="form-control mt-2">
                    <label for="buildingName">Building / House Name</label>
                    <input type="text" id="buildingName" class="form-control mt-2">
                    <label for="areaName">Road / Area Name</label>
                    <input type="text" id="areaName" class="form-control mt-2">
                    <label for="cityName">City</label>
                    <input type="text" id="cityName" class="form-control mt-2">
                    <label for="stateName">State</label>
                    <input type="text" id="stateName" class="form-control mt-2">
                    <label for="pinCode">Pin Code</label>
                    <input type="text" id="pinCode" class="form-control mt-2">
                `,
                showConfirmButton:true,
                showCancelButton:true,
                allowOutsideClick:false,
                confirmButtonText:'Save',
                preConfirm:() => {
                    const name = document.getElementById('name').value
                    const phoneNumber = document.getElementById('phone').value
                    const building = document.getElementById('buildingName').value
                    const area = document.getElementById('areaName').value
                    const city = document.getElementById('cityName').value
                    const state = document.getElementById('stateName').value
                    const pinCode = document.getElementById('pinCode').value

                    if(name.trim() === ""){
                        Swal.showValidationMessage('Name can not be empty')
                    }else if(phoneNumber.trim() === ""){
                        Swal.showValidationMessage('Phone number can not be empty')
                    }else if(building.trim() === ""){
                        Swal.showValidationMessage('Building name can not be empty')
                    }else if(area.trim() === ""){
                        Swal.showValidationMessage('Area name can not be empty')
                    }else if(city.trim() === ""){
                        Swal.showValidationMessage('City name can not be empty')
                    }else if(state.trim() === ""){
                        Swal.showValidationMessage('State name can not be empty')
                    }else if(pinCode.trim() === ""){
                        Swal.showValidationMessage('Pin code can not empty')
                    }else{
                        return {name, phoneNumber, building, area, city, state, pinCode}
                    }
                }
            }).then((result) => {
                if(result.isConfirmed){
                    const {name, phoneNumber, building, area, city, state, pinCode} = result.value
                    //removed the test checker ::: swal
                    fetch(`/profile/address/add?id=${userId}`, {
                        method:'POST',
                        headers:{
                            'content-type':'application/json'
                        },
                        body:JSON.stringify({
                            name, phoneNumber, building, area, city, state, pinCode
                        })
                    }).then((response) => {
                        if(!response) throw new Error('Server Response not ok!')
                        return response.json()
                    }).then((data) => {
                        Swal.fire({
                            icon:'success',
                            title:'Added',
                            text:data.message,
                            showConfirmButton:false
                        }).then(() => window.location.reload())
                    }).catch((error) => {
                        Swal.fire({
                            icon:'error',
                            title:'Error',
                            text:error.message
                        })
                    })
                }
            }).catch((error) => {
                console.log('error', error)
                swal.fire({
                    icon:'error', 
                    title:'Uncaught!',
                    text:'Uncaught Error while geting data, please try again after sometime!'
                })
            })
        }
    }

    
</script>