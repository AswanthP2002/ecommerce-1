<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.css" integrity="sha512-UtLOu9C7NuThQhuXXrGwx9Jb/z9zPQJctuAgNUBK3Z6kkSYT9wJ+2+dh6klS+TDBCV9kNPBbAxbVD+vCcfGPaA==" crossorigin="anonymous" referrerpolicy="no-referrer">
<div class="col">
    <div class="container p-md-5">
        <h3 class="text-dark fw-bold">Add new Product</h3>
        <div class="shadow-p bg-body rounded p-5">
            <form onsubmit="return validateForm(event)" action="/admin/product/add" method="post" enctype="multipart/form-data">
            <h5 class="fw-bold mb-3">Basic Product Details</h5>
            <div class="row gy-3">
                <div class="col-12 col-md-6">
                    <label for="" class="fw-bold field-label">Product Name</label>
                    <input type="text" class="form-control" id="product_name" name="productName" required>
                    <label for="" class="error-message" id="productName-error"></label>
                </div>
                <div class="col-12 col-md-6">
                    <label for="" class="fw-bold field-label">Product Category</label>
                    <select name="productCategory" id="product_category" class="form-control" required>
                        {{!-- <option value="">Select</option> --}}
                        {{#each categories}}
                        <option value="{{this.name}}">{{this.name}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-12">
                    <label for="" class="fw-bold field-label">Product Description</label>
                    <textarea name="productDescription" id="product_description" class="form-control" required></textarea>
                    <label for="" class="error-message" id="productDescription-error"></label>
                </div>
                <div class="col-12 col-md-6">
                    <label for="" class="fw-bold field-label">Brand</label>
                    <select name="productBrand" id="product_brand" class="form-control" required>
                        <option value="">Choose Brand</option>
                        {{#each brands}}
                        <option value="{{this.brandName}}">{{this.brandName}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-12 col-md-6">
                    <label for="" class="fw-bold field-label">Product Style</label>
                    <select name="productStyle" id="product_style" class="form-control" required>
                        {{!-- <option value="">Select</option> --}}
                        <option value="casual">Casual</option>
                        <option value="formal">Formal</option>
                        <option value="party">Party</option>
                        <option value="sports">Sports</option>
                    </select>
                </div>
                <div class="col-12 col-md-4">
                    <label for="" class="fw-bold field-label">Product Color</label>
                    <input type="text" id="product_color" class="form-control" name="productColor" required>
                    <label for="" class="error-message" id="productColor-error"></label>
                </div>
                <div class="col-12 col-md-4">
                    <label for="" class="fw-bold field-label">Color group</label>
                    <select name="colorGroup" id="color_group" class="form-control">
                        <option value="">Select</option>
                        <option value="green">Green</option>
                        <option value="red">Red</option>
                        <option value="yellow">Yellow</option>
                        <option value="orange">Orange</option>
                        <option value="blue">Blue</option>
                        <option value="dark-blue">Dark Blue</option>
                        <option value="purple">Purple</option>
                        <option value="indigo">Indigo</option>
                        <option value="white">White</option>
                        <option value="black">Black</option>
                    </select>
                </div>
                <div class="col-12 col-md-4">
                    <label for="" class="fw-bold field-label">product status</label>
                    <select name="productStatus" id="product_status" class="form-control" disabled>
                        <option value="">Select</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>
                <hr>
                <h5 class="fw-bold mb-3">Product Variant Details</h5>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product size</label>
                    <input type="text" id="product_size" class="bg-light form-control" name="productSizeSmall" value="Small" readonly>
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product Price</label>
                    <input type="number" class="form-control" name="productPriceSmall" id="product_price" required>
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Quantity</label>
                    <input type="text" id="stock_quantity_small" name="stockQuantitySmall" class="form-control" required>
                    <label for="" class="error-message" id="stockQuantity-small-error"></label>
                </div>

                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product size</label>
                    <input type="text" id="product_size" class="bg-light form-control" name="productSizeMedium" value="Medium" readonly>
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product Price</label>
                    <input type="number" class="form-control" name="productPriceMedium" id="product_price">
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Quantity</label>
                    <input type="text" id="stock_quantity_medium" name="stockQuantityMedium" class="form-control">
                    <label for="" class="error-message" id="stockQuantity-medium-error"></label>
                </div>

                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product size</label>
                    <input type="text" id="product_size" class="bg-light form-control" name="productSizeLarge" value="Large" readonly>
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Product Price</label>
                    <input type="number" class="form-control" name="productPriceLarge" id="product_price">
                </div>
                <div class="col-4">
                    <label for="" class="fw-bold field-label">Quantity</label>
                    <input type="text" id="stock_quantity_large" name="stockQuantityLarge" class="form-control">
                    <label for="" class="error-message" id="stockQuantity-large-error"></label>
                </div>
            </div>
            {{!-- Testing for imag ecroping --}}
            <div class="holder mt-2">
                <div>
                    <label for="file-input1">Select Image</label>
                    <input class="w-100 border border-dark p-2" type="file" id="file-input1" name="product_images" accept="image/png, image/jpeg" required>
                </div>
                <div>
                    <label for="preview1">Preview</label>
                    <div id="preview1" class="previews"></div>
                </div>
                <div>
                    <label for="cropSize1">Size</label>
                    <input class="w-100" type="range" min="50" max="300" value="200" id="cropSize1">
                </div>
                <div id="buttons">
                    <button id="saveButton1" class="btn btn-primary" type="button">Save</button>
                    <button id="clearButton1" class="btn btn-secondary" type="button">Clear</button>
                </div>
            </div>
            {{!-- Testing for image cropping --}}
            <div class="holder mt-2">
                <div>
                    <label for="file-input2">Select Image</label>
                    <input class="w-100 border border-dark p-2" type="file" id="file-input2" name="product_images" accept="image/png, image/jpeg" required>
                </div>
                <div>
                    <label for="preview2">Preview</label>
                    <div id="preview2" class="previews"></div>
                </div>
                <div>
                    <label for="cropSize2">Size</label>
                    <input class="w-100" type="range" min="50" max="300" value="200" id="cropSize2">
                </div>
                <div id="buttons">
                    <button id="saveButton2" class="btn btn-primary" type="button">Save</button>
                    <button id="clearButton2" class="btn btn-secondary" type="button">Clear</button>
                </div>
            </div>
            {{!-- Testing for image croping --}}
            <div class="holder mt-2">
                <div>
                    <label for="file-input3">Select Image</label>
                    <input class="w-100 border border-dark p-2" type="file" id="file-input3" name="product_images" accept="image/png, image/jpeg" required>
                </div>
                <div>
                    <label for="preview3">Preview</label>
                    <div id="preview3" class="previews"></div>
                </div>
                <div>
                    <label for="cropSize3">Size</label>
                    <input class="w-100" type="range" min="50" max="300" value="200" id="cropSize3">
                </div>
                <div id="buttons">
                    <button id="saveButton3" class="btn btn-primary" type="button">Save</button>
                    <button id="clearButton3" class="btn btn-secondary" type="button">Clear</button>
                </div>
            </div>
            <div class="pt-4">
                <button class="btn btn-success" type="submit">Add to inventory</button>
                <a href="/admin/product" class="btn btn-info">Cancel</a>
            </div>
            </form>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js" integrity="sha512-JyCZjCOZoyeQZSd5+YEAcFgz2fowJ1F1hyJOXgtKu4llIa0KneLcidn5bwfutiehUTiOuK87A986BZJMko0eWQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>

function setCropper(fileInputId, previewId, cropSizeId, saveButtonId, clearButtonId){
    const fileInput = document.getElementById(fileInputId)
    const preview = document.getElementById(previewId)
    const cropSize = document.getElementById(cropSizeId)
    const saveButton = document.getElementById(saveButtonId)
    const clearButton = document.getElementById(clearButtonId)

    let cropper = null

    fileInput.addEventListener('change', (event) => {
        const uploadedImage = event.target.files[0]
        const reader = new FileReader()

        reader.onload = (event) => {
            if(cropper){
                cropper.destroy()
            }

            preview.innerHTML = ''
            const image = document.createElement('img')
            image.src = event.target.result
            image.id = 'prd-img1'
            image.style.maxWidth = '100%'
            preview.appendChild(image)
            cropper = new Cropper(image, {
                aspectRatio:NaN,
                viewMode:1,
                autoCropArea:1,
                movable:true,
                zoomable:true,
                scalable:true,
                rotatable:true,
                cropBoxResizable:true,
                background:true
            })

            console.log('cropper initialized')
        }
        reader.readAsDataURL(uploadedImage)
    })

    saveButton.addEventListener('click', () => {
        if(cropper){
            const size = parseInt(cropSize.value)
            console.log('croping size ', size)
            const canvas = cropper.getCroppedCanvas({
                height:size,
                width:size
            })

            const croppedImage = document.createElement('img')
            croppedImage.src = canvas.toDataURL()
            preview.innerHTML = ''
            preview.appendChild(croppedImage)
            console.log('cropped image created')
            
        }else{
            console.log('cropper not initialized')
        }
    })

    clearButton.addEventListener('click', () => {
        if(cropper){
            cropper.destroy()
        }

        preview.innerHTML = ''
        fileInput.value = ''
    })
}       

setCropper('file-input1', 'preview1', 'cropSize1', 'saveButton1', 'clearButton1')
setCropper('file-input2', 'preview2', 'cropSize2', 'saveButton2', 'clearButton2')
setCropper('file-input3', 'preview3', 'cropSize3', 'saveButton3', 'clearButton3')

const productNameError = document.getElementById('productName-error')
const descriptionError = document.getElementById('productDescription-error')
const colorErorr = document.getElementById('productColor-error')
const stockQuantitySmall = document.getElementById('stock_quantity_small')
const stockQuantityMedium = document.getElementById('stock_quantity_medium')
const stockQuantityLarge = document.getElementById('stock_quantity_large')

const productName = document.getElementById('product_name')
const productDescription = document.getElementById('product_description')
const productColor = document.getElementById('product_color')
const stockQuantitySmallError = document.getElementById('stockQuantity-small-error')
const stokcQuantityMediumError = document.getElementById('stockQuantity-medium-error')
const stockQuantityLargeError = document.getElementById('stockQuantity-large-error')

function validateForm(event){
    if(productNameError.innerHTML || descriptionError.innerHTML || colorErorr.innerHTML || stockQuantitySmallError.innerHTML || stokcQuantityMediumError.innerHTML || stockQuantityLargeError.innerHTML){
        event.preventDefault()
        alert('Please fill the form correctly!')
        return false
    }

    return true
}

//Product name validation
function validateProductName(){
    const name = productName.value
    if(name.trim() === ""){
        productNameError.innerHTML = 'Product name can not be empty'
        productNameError.style.color = 'red'
        productNameError.style.display = 'block'
    }else{
        productNameError.innerHTML = ''
        productNameError.style.display = 'none'
    }
}
function validateProductDescription(){
    const description = productDescription.value
    if(description.trim() === ""){
        descriptionError.innerHTML = 'Product Description can not be empty!'
        descriptionError.style.color = 'red'
        descriptionError.style.display = 'block'
    }else{
        descriptionError.innerHTML = ''
        descriptionError.style.display = 'none'
    }
}
function validateProductColor(){
    const color = productColor.value
    if(color.trim() === ''){
        colorErorr.innerHTML = 'Product color can not be empty'
        colorErorr.style.color = 'red'
        colorErorr.style.display = 'block'
    }else{
        colorErorr.innerHTML = ''
        colorErorr.style.display = 'none'
    }
}
function validateStockQtySmall(){
    const quantity = stockQuantitySmall.value
    const pattern = /^[0-9]+$/
    if(quantity.trim() === ''){
        stockQuantitySmallError.innerHTML = 'Product Quantity Can not be empty'
        stockQuantitySmallError.style.color = 'red'
        stockQuantitySmallError.style.display = 'block'
    }else if(!pattern.test(quantity)){
        stockQuantitySmallError.innerHTML = 'Enter a valid quantity'
        stockQuantitySmallError.style.color = 'red'
        stockQuantitySmallError.style.display = 'block'
    }else{
        stockQuantitySmallError.innerHTML = ''
        stockQuantitySmallError.style.display = 'none'
    }
}
function validateStockQtyMedium(){
    const quantity = stockQuantityMedium.value
    const pattern = /^[0-9]+$/
    if(quantity.trim() === ''){
        stokcQuantityMediumError.innerHTML = 'Product Quantity Can not be empty'
        stokcQuantityMediumError.style.color = 'red'
        stokcQuantityMediumError.style.display = 'block'
    }else if(!pattern.test(quantity) || quantity.includes('.')){
        stokcQuantityMediumError.innerHTML = 'Enter a valid quantity'
        stokcQuantityMediumError.style.color = 'red'
        stokcQuantityMediumError.style.display = 'block'
    }else{
        stokcQuantityMediumError.innerHTML = ''
        stokcQuantityMediumError.style.display = 'none'
    }
}
function validateStockQtyLarge(){
    const quantity = stockQuantityLarge.value
    const pattern = /^[0-9]+$/
    if(quantity.trim() === ''){
        stockQuantityLargeError.innerHTML = 'Product Quantity Can not be empty'
        stockQuantityLargeError.style.color = 'red'
        stockQuantityLargeError.style.display = 'block'
    }else if(!pattern.test(quantity) || quantity.includes('.')){
        stockQuantityLargeError.innerHTML = 'Enter a valid quantity'
        stockQuantityLargeError.style.color = 'red'
        stockQuantityLargeError.style.display = 'block'
    }else{
        stockQuantityLargeError.innerHTML = ''
        stockQuantityLargeError.style.display = 'none'
    }
}



//validate fields
productName.addEventListener('keyup', validateProductName)
productDescription.addEventListener('keyup', validateProductDescription)
productColor.addEventListener('keyup', validateProductColor)
stockQuantitySmall.addEventListener('keyup', validateStockQtySmall)
stockQuantityMedium.addEventListener('keyup', validateStockQtyMedium)
stockQuantityLarge.addEventListener('keyup', validateStockQtyLarge)


</script>