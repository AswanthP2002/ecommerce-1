<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">

<div class="col">
    <p class="fw-bold fs-4">Banner Management</p>
    <div class="border rounded mt-3 p-3" style="border: 2px solid #f4efef;">
        <p class="fw-bold">Landing Banners</p>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#landingBannerModal">Add Banner</button>
        <div class="row">
            {{#each landingBanners}}
            <div class="col-md-4">
                <img src="/images/backend/banners/{{this.bannerType}}/{{this.bannerImage}}" alt="" class="img-thumbnail" style="max-width: 350px;height:200px;object-fit: cover;object-position: center;">
                <button class="btn"><i class="fa-solid fa-pencil"></i></button>
                <button onclick="if (confirm('Are your sure want to delete the banner')) deleteBanner('{{this._id}}', this); return false" class="btn"><i class="fa-solid fa-trash"></i></button>
            </div>
            {{/each}}
        </div>
    </div>
    <div class="border rounded mt-3 p-3" style="border: 2px solid #f4efef;">
        <p class="fw-bold">Clipping Banners</p>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#clippingBannerModal">Add Banner</button>
        <div class="row">
            {{#each clippingBanners}}
            <div class="col-md-2">
                <img src="/images/backend/banners/{{this.bannerType}}/{{this.bannerImage}}" alt="" class="img-thumbnail" style="max-width: 150px;height:200px;object-fit: cover;object-position: center;">
                <div>
                    <button class="btn"><i class="fa-solid fa-pencil"></i></button>
                    <button onclick="if (confirm('Are your sure want to delete the banner')) deleteBanner('{{this._id}}', this); return false" class="btn"><i class="fa-solid fa-trash"></i></button>
                </div>
            </div>
            {{/each}}
        </div>
    
    </div>
    <div class="border rounded mt-3 p-3" style="border: 2px solid #f4efef;">
        <p class="fw-bold">Offer Banners</p>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#offerBannerModal">Add Banner</button>
        <div class="row">
            {{#each offerBanners}}
            <div class="col-md-2">
                <img src="/images/backend/banners/{{this.bannerType}}/{{this.bannerImage}}" alt="" class="img-thumbnail" style="max-width: 350px;height:200px;object-fit: cover;object-position: center;">
                <div>
                    <button class="btn"><i class="fa-solid fa-pencil"></i></button>
                    <button onclick="if (confirm('Are your sure want to delete the banner')) deleteBanner('{{this._id}}', this); return false" class="btn"><i class="fa-solid fa-trash"></i></button>
                </div>
            </div>
            {{/each}}
        </div>
    </div>

    {{!-- modals for adding banners --}}

    {{!-- 1. landing modal --}}
    <div class="modal fade" id="landingBannerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Landing Banner</h4>
                </div>
                <div class="modal-body">
                    <form onsubmit="addBanner(event, this)" action="">
                        <div>
                            <label for="">Banner Type</label>
                            <select name="bannerType" id="" class="form-control">
                                <option value="Landing Banner">Landing Banner</option>
                            </select>
                        </div>
                        <div class="mt-3">
                            <label for="">Select File</label>
                            <input type="file" name="bannerImage" id="landingBannerFile" class="form-control" accept="image/png, image/jpg, image/jpeg">
                            <div>
                                <label for="">Preview</label>
                                <div id="landingBannerPreview"></div>
                            </div>
                            <div>
                                <label for="">Crop Size</label>
                                <input type="range" name="" id="landingBannerCropSize" min="50" max="200" value="100">
                            </div>
                            <div>
                                <button type="button" class="btn btn-warning" id="landingBannerSaveButton">Save</button>
                                <button type="button" class="btn btn-secondary" id="landingBannerClearButton">Clear</button>
                            </div>
                        </div>
                        <div class="mt-2">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{!-- 1. landing modal --}}
    <div class="modal fade" id="clippingBannerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Clipping Banner</h4>
                </div>
                <div class="modal-body">
                    <form onsubmit="addBanner(event, this)" action="">
                    <div>
                        <label for="">Banner Type</label>
                        <select name="bannerType" id="" class="form-control">
                            <option value="Clipping Banner">Clipping Banner</option>
                        </select>
                    </div>
                    <div class="mt-3">
                        <label for="">Select File</label>
                        <input type="file" name="bannerImage" id="clippingBannerFile" class="form-control">
                            <div>
                                <label for="">Preview</label>
                                <div id="clippingBannerPreview"></div>
                            </div>
                            <div>
                                <label for="">Crop Size</label>
                                <input type="range" name="" id="clippingBannerCropSize" min="50" max="200" value="100">
                            </div>
                            <div>
                                <button type="button" class="btn btn-warning" id="clippingBannerSaveButton">Save</button>
                                <button type="button" class="btn btn-secondary" id="clippingBannerClearButton">Clear</button>
                            </div>
                    </div>
                    <div class="mt-2">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{!-- 1. landing modal --}}
    <div class="modal fade" id="offerBannerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Offer Banner</h4>
                </div>
                <div class="modal-body">
                    <form onsubmit="addBanner(event, this)" action="">
                    <div>
                        <label for="">Banner Type</label>
                        <select name="bannerType" id="" class="form-control">
                            <option value="Offer Banner">Offer Banner</option>
                        </select>
                    </div>
                    <div class="mt-3">
                        <label for="">Select File</label>
                        <input type="file" name="bannerImage" id="offerBannerFile" class="form-control">

                            <div>
                                <label for="">Preview</label>
                                <div id="offerBannerPreview"></div>
                            </div>
                            <div>
                                <label for="">Crop Size</label>
                                <input type="range" name="" id="offerBannerCropSize" min="50" max="200" value="100">
                            </div>
                            <div>
                                <button type="button" class="btn btn-warning" id="offerBannerSaveButton">Save</button>
                                <button type="button" class="btn btn-secondary" id="offerBannerClearButton">Clear</button>
                            </div>

                    </div>
                    <div>
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{!-- Modals for changing the current image --}}
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>

    function setupCropper(fileId, previewId, cropSizeId, saveButtonId, clearButtonId){
        const fileUpload = document.getElementById(fileId)
        const preview = document.getElementById(previewId)
        const cropSize = document.getElementById(cropSizeId)
        const saveButton = document.getElementById(saveButtonId)
        const clearButton = document.getElementById(clearButtonId)

        let cropper = null

        try{
            fileUpload.addEventListener('change', (event) => {
            const file = event.target.files[0]
            const reader = new FileReader()

            reader.onload = (event) => {
                if(cropper){
                    cropper.destroy()
                }

                preview.innerHTML = ''
                //create new image eleement
                const image = document.createElement('img')
                image.src = event.target.result
                image.style.maxWidth = '100%'
                preview.appendChild(image)

                cropper = new Cropper(image, {
                    aspectRatio: NaN,
                    viewMode: 1,
                    autoCropArea: 1,
                    movable: true,
                    zoomable: true,
                    scalable: true,
                    rotatable: true,
                    cropBoxResizable: true,
                    background: true
                })

                console.log('cropper initialized')
            }
            reader.readAsDataURL(file)
            })

            saveButton.addEventListener('click', () => {
                if(cropper){
                    const size = parseInt(cropSize.value)
                    const canvas = cropper.getCroppedCanvas({
                        height:size,
                        width:size
                    })

                    preview.innerHTML = ''
                    const croppedImage = document.createElement('img')
                    croppedImage.src = canvas.toDataURL()
                    preview.appendChild(croppedImage)
                }else{
                    console.log('croper not found!')
                }
            })

            clearButton.addEventListener('click', () => {
                if(cropper){
                    cropper.destroy()
                    cropper = null
                }

                preview.innerHTML = ''
                fileUpload.value = ''
            })

        }catch(e){
            console.log('error occured while initializing cropper', e)
        }
    }

    setupCropper("landingBannerFile", "landingBannerPreview", "landingBannerCropSize", "landingBannerSaveButton", "landingBannerClearButton")
    setupCropper("clippingBannerFile", "clippingBannerPreview", "clippingBannerCropSize", "clippingBannerSaveButton", "clippingBannerClearButton")
    setupCropper("offerBannerFile", "offerBannerPreview", "offerBannerCropSize", "offerBannerSaveButton", "offerBannerClearButton")

    function addBanner(event, form){
        console.log('function invoked ready to be fetched!')
        event.preventDefault()
        const formData = new FormData(form)
        console.log('form data', formData)
        fetch('/admin/banners/add', {
            method:'POST',
            body:formData
        })
        .then((response) => {
            console.log(response)
            if(!response.ok) throw new Error('Page not responding!')
            return response.json()
        })
        .then((data) => {
            if(data && data.success){
                Swal.fire({
                    icon:'success',
                    title:'Added',
                    text:data.message,
                    showConfirmButton:false,
                    timer:1600
                }).then(() => window.location.reload())
            }
        })
        .catch((error) => {
            Swal.fire({
                icon:'error',
                title:'Error',
                text:error.message
            })
        })
    }

    function deleteBanner(bannerId, button){
        //testing
        console.log('function invoked ready to be fetched!')
        if(bannerId){
            fetch(`/admin/banners/remove?bannerId=${bannerId}`, {
                method:'DELETE'
            })
            .then((response) => {
                if(!response.ok) throw new Error('Page not responding!')
                return response.json()
            })
            .then((data) => {
                if(data && data.success){
                    Swal.fire({
                        icon:'success',
                        title:'Banner Removed',
                        showConfirmButton:false,
                        timer:1600
                    }).then(() => window.location.reload())
                }else{
                    Swal.fire({
                        icon:'error',
                        title:'Invalid',
                        text:data.message
                    })
                }
            })
            .catch((error) => {
                Swal.fire({
                    icon:'error',
                    title:'Error',
                    text:error.message
                })
            })
        }
    }
</script>